DXRuby用ウィンドウシステムDXRubyWS アーキテクチャいろいろ

■１．はじめに

クラスとメソッドのリファレンスだけあっても、概念的な部分がよくわからないと思います。この文書ではDXRubyWSで実装されているものの考え方などを書いてみます。


■２．クラスとオブジェクトのツリー

DXRubyWSはコントロール(WSContol)とコンテナ(WSContainer)からなるCompositeパターンのような構造をしています。抽象クラスはありません。
コントロールはSpriteを継承しており、

class WSControl < Sprite

コンテナはコントロールを継承しています。

class WSContainer < WSControl

コントロールはDXRubyWS上でコントロールとして振舞うための基本的な機能一式が実装されています。コンテナはそれに加える形で、配下にコントロールを保持して制御する機能が実装されています。もちろんコンテナはコントロールとして振舞うことができます。
すべてのコントロールはWSControlもしくはWSContainerを継承して作ります。すべてのコントロールはSpriteを継承しているので、その機能が使えますし、基本機能はそれを使って作られています。

DXRubyWSは起動しただけで何もしなくてもWS.desktopとして参照可能なWSDesktopオブジェクトが作成されます。WSDesktopはWSContainerを継承したコンテナで、特殊な実装となっています。
DXRubyWSのすべてのコントロールはWS.desktop配下に存在している必要があります。WS.desktop配下のコンテナの配下のコンテナの配下の・・・というツリー構造でも可で、WS.desktopから辿れることが条件です。


■３．イベント

DXRubyWSのイベントはWS.desktopが発行します。発行タイミングはWS.updateを呼んだときで、まず最初にイベント条件のチェックと発行を行い、その後、配下のコントロールのupdateを呼び出します。
イベントはその動作パターンにより2種類に分けられます。マウスイベントとキーボードイベントです。

マウスイベントはマウスの情報に関する変化をメソッド呼び出しという形で発行します。変化とは、カーソルの移動やボタンの押下、ホイールの回転などです。発行されたイベントはマウスカーソルの位置に存在するコントロールに伝達されます。
マウスイベントはマウスカーソルの位置により送信対象が変わりますので、座標やボタン押下状態の変化を検知した場合、イベント送信先をマウスカーソルの座標とデスクトップ配下のコントロールとの衝突判定(Spriteの機能)で調べます。まず最初にデスクトップ配下のコントロールを判定し、コンテナがヒットしたらその配下を判定し・・・と繰り返し、オブジェクトツリーの先端に存在するコントロールに対してイベントが送信されます。
マウスイベントはon_mouse_xxxという名前のメソッドを呼ぶことで発行し、クラスツリー最上位のWSControlに実装されたイベントメソッドでシグナルを発行します。メソッドをオーバーライドするときはsuperを呼ぶように心がけてください。
on_mouse_overとon_mouse_outはマウスカーソルが乗っているオブジェクトを識別する必要があるので、on_mouse_moveメソッドの戻り値(selfを返す)を保存して判定します。on_mouse_moveをオーバーライドするときはselfを返すように気をつけてください。

キーボードイベントはキーボードのキーが押されたり離されたり、文字列が入力されたりしたときに発行されます。キーの押下と文字列入力が別になっているのは制御キーとIMEの動作を考慮したもので、文字列のほうには制御コードは入りません。キーの押下のほうには文字も入ってきますが、こっちはカーソルの移動やBackSpace処理などを行う用途で使うことを想定しており、必要なコードだけ拾って動かしてください。
キーボードイベントはマウスカーソルの位置は関係なく、フォーカスを持ったコントロールに対して直接送信されます。
フォーカスはWS.focus=で設定しますが、このタイミングでフォーカスを失ったコントロールのon_leave、フォーカスを得たコントロールのon_enterが呼ばれます。これらもイベントの仲間です。


■４．フォーカス

DXRubyWSのフォーカスはキーボードイベントの送信先という意味があります。フォーカスのあるコントロールは、たとえばウィンドウならタイトルバーの色が変わり、テキストボックスならカーソルが点滅するような「アクティブ状態」を表現することがあります。
フォーカスはDXRubyWS全体としてはシステムフォーカス(WS.focus=で設定したもの)しかありません。
標準GUIの場合はちょっと細工がされていて、デスクトップ配下のウィンドウがシステムフォーカスを得ますが、ウィンドウ上のフォーカスを持つコントロールもあり、こっちはウィンドウが制御しており、on_enterやon_leaveの発行、キーボードイベントの転送など、システムの動作をエミュレーションしています。本来であればアクティブオブジェクトはシステム全体で1つだけのはずですが、標準GUIではウィンドウとその上のコントロールの2つが同時にアクティブになっているような感じです。ウィンドウ上のコントロールがシステムフォーカスを得ることはありません。
ウィンドウがシステムの動作をエミュレーションしているので、コントロールはウィンドウ上ではなくデスクトップに直接配置しても同じように動作し、マウスでクリックするとフォーカスを受け取れますし、キーボードイベントもきちんと動作します。


■５．シグナル

シグナルはユーザ定義のイベントです。
コントロールのadd_handlerメソッドで登録すると、そのコントロールがシグナルを発行したときに登録されたコードが動作します。
単純なマウスイベントやキーボードイベントよりももっと複雑な条件でイベントを発行したいような場合に、条件判定してシグナルを発行するようにします。
シグナルを受けるのは自分自身でもいいし、他のオブジェクトでも構いません。自分自身で受けるぐらいなら普通にメソッドを呼んだほうが早い気はしますので、基本的には外部のオブジェクトが内部のイベントを受け取るような形で使います。


■６．ここまで

書きかけです。



